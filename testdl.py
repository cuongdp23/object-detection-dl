# -*- coding: utf-8 -*-
"""testDL.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vmIYMo2BEonTZ7GVRhTzaFSbR9ELVX7V
"""

import streamlit as st
from PIL import Image
import tensorflow as tf
import numpy as np
import cv2
from PIL import Image, ExifTags
def get_rotation_angle(image):
    try:
        for orientation in ExifTags.TAGS.keys():
            if ExifTags.TAGS[orientation] == 'Orientation':
                break

        exif = dict(image._getexif().items())

        if exif[orientation] == 3:
            return 180
        elif exif[orientation] == 6:
            return 270
        elif exif[orientation] == 8:
            return 90
    except (AttributeError, KeyError, IndexError):
        return 0

# Hàm phân loại ảnh
def classify_image(image):
    if image.shape[2] == 4:
      image = cv2.cvtColor(image, cv2.COLOR_RGBA2RGB)
    # Resize ảnh để khớp với kích thước đầu vào của mô hình (ví dụ: 224x224)
    resized_image = cv2.resize(image, (224, 224))

    # Chuyển đổi ảnh thành kiểu dữ liệu float32
    resized_image = resized_image.astype(np.float32)

    # Áp dụng bất kỳ chuẩn hóa hoặc sắp xếp kênh cần thiết
    # Ví dụ: nếu mô hình yêu cầu ảnh RGB, bạn có thể chuyển đổi BGR thành RGB:
    rgb_image = resized_image[:, :, ::-1]  # Chuyển đổi BGR thành RGB

    # Chuẩn hóa giá trị pixel
    normalized_image = rgb_image / 255.0

    # Thêm một chiều mới để đại diện cho kích thước batch (1 trong trường hợp này)
    preprocessed_image = np.expand_dims(normalized_image, axis=0)

    # Load mô hình phân loại từ file HM_Model.keras
    model_classify = tf.keras.models.load_model('/content/drive/MyDrive/Projects/DeepLearning/five_object.h5')

    # Phân loại ảnh bằng mô hình
    predictions = model_classify.predict(preprocessed_image)

    # Trả về kết quả phân loại
    return predictions



# Hàm lấy tên lớp dự đoán
def get_class_name(prediction):
    classes = ['Boot', 'Chair', 'Laptop', 'Sofa', 'Table']
    class_index = np.argmax(prediction)
    return classes[class_index]
# Giao diện ứng dụng sử dụng Streamlit
def main():
    st.title("Website phân loại")

    uploaded_file = st.file_uploader("Chọn một file ảnh", type=["jpg", "jpeg", "png"])

    if uploaded_file is not None:
        image = Image.open(uploaded_file)
        rotation_angle = get_rotation_angle(image)
        st.write('Rotation Angle:', rotation_angle)
        st.image(image, caption='Ảnh đã tải lên', use_column_width=True)

        if st.button('Phân loại ảnh'):
            image_array = np.array(image)
            preprocessed_image = image_array

            # Consider rotating the image based on the rotation angle if needed
            if rotation_angle != 0:
                image = image.rotate(rotation_angle, expand=True)
                image_array = np.array(image)
                preprocessed_image = image_array

            label = classify_image(preprocessed_image)
            class_name = get_class_name(label)
            st.write('Kết quả phân loại:', class_name)


# Chạy ứng dụng
if __name__ == "__main__":
    main()